<?php

namespace Tests\Feature;

use App\Models\Pizza;
use App\Services\CartService;
use Tests\TestCase;

class CartTest extends TestCase
{
    private $cart_service;
    private $valid_cart;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->cart_service = new CartService();
        $this->valid_cart = [[
                'pizza_id' => factory(Pizza::class)->create()->id,
                'count' => 1
            ]
        ];
    }

    /** @test */
    public function it_returns_empty_cart_from_empty_session()
    {
        //Given: empty session
        $this->assertNull(session('cart'));
        //Then: trying to get cart
        $cart = $this->cart_service->getCart();
        //Result: empty array as return and in session
        $this->assertEquals([], $cart);
        $this->assertEquals([], session('cart'));
    }

    /** @test */
    public function it_returns_cart_from_filled_session()
    {
        //Given: filled session
        session()->put(['cart' => $this->valid_cart]);
        $this->assertNotNull(session('cart'));
        //Then: trying to get cart
        $cart = $this->cart_service->getCart();
        //Result: same cart as return and in session
        $this->assertEquals($this->valid_cart, $cart);
        $this->assertEquals($this->valid_cart, session('cart'));
    }

    /** @test */
    public function it_user_can_add_pizzas_to_cart()
    {
        //Given: empty session
        $this->assertNull(session('cart'));
        //Then: user adds pizza
        $pizza = factory(Pizza::class)->create();
        $this->cart_service->addPizza($pizza->id);
        //and another one
        $this->cart_service->addPizza($pizza->id);
        //Result: pizza is in cart
        $this->assertEquals($pizza->id, session('cart')[0]['pizza_id']);
        $this->assertEquals(2, session('cart')[0]['count']);
    }

    /** @test */
    public function user_can_delete_one_pizza_from_cart()
    {
        //Given: cart with pizza
        $pizza = factory(Pizza::class)->create();
        session()->put(['cart' => [[
            'pizza_id' => $pizza->id,
            'count' => 2
        ]]]);
        //Then: user deletes one pizza
        $this->cart_service->deletePizza($pizza->id);
        //Result: there is one pizza less
        $this->assertEquals($pizza->id, session('cart')[0]['pizza_id']);
        $this->assertEquals(1, session('cart')[0]['count']);
    }

    /** @test */
    public function user_can_delete_entire_position_from_cart()
    {
        //Given: cart with two pizzas
        $pizzas = factory(Pizza::class,2)->create();
        session()->put(['cart' => [
            [
            'pizza_id' => $pizzas[0]->id,
            'count' => 2
            ],
            [
            'pizza_id' => $pizzas[1]->id,
            'count' => 4
            ],
        ]]);
        //Then: user removes entire position
        $this->cart_service->removePizza($pizzas[0]->id);
        //Given: only one position left
        $this->assertEquals($pizzas[1]->id, session('cart')[0]['pizza_id']);
        $this->assertEquals(4, session('cart')[0]['count']);
    }
}
